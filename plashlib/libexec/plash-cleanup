#!/usr/bin/env python3
#
# usage: plash cleanup

from glob import glob
from shutil import rmtree
import os
import sys
from errno import errorcode

from plashlib.utils import die

os.dup2(2, 1) # redirect all stdout to stderr

if not rmtree.avoids_symlink_attacks:
    die('cowardly dying: the stdlib of this python '
        'installtaion does not support a safe rmtree (rmtree.avoids_symlink_attacks)')

def get_alive_processes():
    return set(int(i) for i in os.listdir('/proc') if i.isdigit())

def get_mountpoints():
    for mountpoint in glob('/var/tmp/plash-mountpoint-*-*'):
        pid = os.path.basename(mountpoint).split('-')[2]
        yield int(pid), mountpoint

def get_changdirs():
    for changesdir in glob('/tmp/plash-changedata-*-*'):
        pid = os.path.basename(changesdir).split('-')[2]
        yield int(pid), changesdir

mountpoints = dict(get_mountpoints())
changedirs = dict(get_changdirs())
alive_procs = get_changdirs() # that must be called last to avoid race condition

cleanup_mountpoints = set(mountpoints.keys()) - alive_procs
cleanup_changedirs = set(changedirs.keys()) - alive_procs

for pid in cleanup_changedirs:
    ch



#    if int(pid) not in alive:
#        print('rmdir {}: '.format(mountpoint), end='')
#        sys.stdout.flush()
#        try:
#            os.rmdir(mountpoint) # rmdir will remove it only if its empty
#        except OSError as exc:
#            print(errorcode[exc.errno])
#        else:
#            print('OK')
