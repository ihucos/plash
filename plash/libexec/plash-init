#!/usr/bin/env python3
#
# usage: plash init
# Initialize build data. Run this on a new system before anything else.

import os
import platform
from os.path import join

from plash.utils import get_plash_data, handle_help_flag, hashstr

handle_help_flag()

plash_data = get_plash_data()
os.makedirs(plash_data, exist_ok=True)
os.chmod(plash_data, 0o755)

os.makedirs(join(plash_data, 'index'), exist_ok=True, mode=0o755)
os.makedirs(join(plash_data, 'cache_keys'), exist_ok=True, mode=0o755)
os.makedirs(join(plash_data, 'layers'), exist_ok=True, mode=0o755)
os.makedirs(join(plash_data, 'tmp'), exist_ok=True, mode=0o700)
os.makedirs(join(plash_data, 'mnt'), exist_ok=True, mode=0o700)

# create the empty root container
os.makedirs(join(plash_data, 'layers', '0', '_data', 'root'), exist_ok=True)

try:
    with open(join(plash_data, 'id'), 'x') as f:
        f.write(hashstr(os.urandom(128)))
except FileExistsError:
    pass

try:
    with open(join(plash_data, 'union_taste'), 'x') as f:
        if not os.getuid() and platform.system() == 'Linux':
            # overlay is only in the Linux kernel and accesible by root
            f.write('overlay')
        else:
            # unionfs is fuse based and available in Linux, Mac and FreeBSD
            f.write('unionfs-fuse')
except FileExistsError:
    pass

try:
    os.symlink(join(plash_data, 'layers', '0'), join(plash_data, 'index', '0'))
except FileExistsError:
    pass
