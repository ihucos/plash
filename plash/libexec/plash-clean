#!/usr/bin/env python3
# usage: plash data clean [ --clean-index ] [ --clean-cache-keys ] [ --clean-tmp ]
# clean older containers

import os
import signal
import math
import shutil
from time import time
import sys
from plash import utils
from plash.unshare import unshare_if_user
import shutil
import subprocess
from collections import Counter

utils.handle_help_flag()
utils.assert_initialized()

user_args = sys.argv[1:]
if not user_args:
    user_args = ['--clean-index', '--clean-tmp', '--clean-cache-keys']

plash_data = utils.get_plash_data()

#
# remove unused fuse mounts
#
nscount = Counter()
unionfs = {}
for proc in os.listdir('/proc'):
    if not proc.isdigit():
        continue
    try:
        mntns = os.readlink(os.path.join('/proc', proc, 'ns/mnt'))
        with open(os.path.join('/proc', proc, 'cmdline')) as f:
            prog = f.read().split('\0', 1)[:-1]
    except OSError:
        continue

    if 'unionfs' in prog[0]: # XXXXXXXXX FIXME user ==
        unionfs[proc] = mntns
    print('update', prog, mntns)
    nscount.update([mntns])
print(nscount)
print(unionfs)
for pid, mntns in unionfs.items():
    count = nscount[mntns]
    if count == 1: # I am the only one
        print('killing', pid)
        os.kill(int(pid), signal.SIGINT)

# so we support mapped users in fs access
unshare_if_user() # XXXXXXx

def remove_broken_links(dir):
    count = 0
    for file in os.listdir(dir):
        full_path = os.path.join(dir, file)
        try:
            os.stat(full_path)
        except FileNotFoundError:
            try:
                os.unlink(full_path)
                count += 1
            except FileNotFoundError:
                pass # race condition, link removed by another process
    return count

#
# Remove all broken links in $PLASH_DATA/index
#
if '--clean-index' in user_args:
    index_dir = os.path.join(plash_data, 'index')
    count = remove_broken_links(index_dir)
    if not '--quiet' in user_args:
        print('cleaned {} index link(s)'.format(count), file=sys.stderr)

#
# Remove all broken links in $PLASH_DATA/cache_keys
#
if '--clean-cache-keys' in user_args:
    cache_keys_dir = os.path.join(plash_data, 'cache_keys')
    count = remove_broken_links(cache_keys_dir)
    if not '--quiet' in user_args:
        print('cleaned {} cache_keys link(s)'.format(count), file=sys.stderr)

#
# Remove unused tmp dirs in $PLASH_DATA/tmp
#
if '--clean-tmp' in user_args:
    deleted_tmps = 0
    tmp = os.path.join(utils.get_plash_data(), 'tmp')
    for file in os.listdir(tmp):
        abs_file = os.path.join(tmp, file)
    
        try:
            _, sid, pid, *_ = file.split('_')
            pid = int(pid)
        except ValueError:
            print('bad {}'.format(abs_file), file=sys.stderr)
            continue
    
        try:
            real_sid = os.getsid(pid)
        except ProcessLookupError:
            # no such pid, delete its tmp data
            delete = True
        else:
            if str(sid) == str(real_sid):
                # process still alive, don't delete its tmp dir
                delete = False
            else:
                # sid mismatch, its another one, delete
                delete = True
    
        if delete:
            # print('deleting {}'.format(abs_file), file=sys.stderr) # no noise
            shutil.rmtree(abs_file)
            deleted_tmps += 1
    if not '--quiet' in user_args:
        print('cleaned {} unused tmp directories'.format(deleted_tmps), file=sys.stderr)
