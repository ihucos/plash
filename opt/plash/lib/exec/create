#!/usr/bin/env python3
#
# usage: plash create CONTAINER [ CMD1 [ CMD2 ... ] ]
#
# Creates a new container from a command. If no command is passed, a shell is
# started. The new container is printed to stdout, all other output goes to
# stderr. Note that a new container is only returned if the build command
# returns 0 (success) as exit code.  For most cases use `plash build` for a
# higher level interface.
#
# Parameters may be interpreted as build instruction.
#
# Examples:
#
# $ plash create 7 ./buildscript.sh
# 42
#
# $ sudo plash create 3
# /home/fulano # echo 'hello' > /file
# /home/fulano # exit 0
# 71
#
# $ plash b create -f ubuntu -- touch /myfile
# 44

import os
import sys
from os.path import join
from sys import exit

from plash import utils
from plash.utils import (
    assert_initialized,
    die,
    die_with_usage,
    nodepath_or_die,
)

assert_initialized()

plash_tmp = join(os.environ["PLASH_DATA"], "tmp")

try:
    container = sys.argv[1]
    cmd = sys.argv[2:]
except IndexError:
    die_with_usage()

nodepath_or_die(container)

# use with login shell
if cmd:
    cmd = ["sh", "-lc", 'exec env "$@"', "--"] + cmd

changesdir = utils.plash_call("mkdtemp")
exit = utils.plash_call(
    *(
        [
            "runopts",
            "-c",
            container,
            "-d",
            changesdir,
            "-m",
            "/home",
            "-m",
            "/root",
            "-m",
            "/etc/resolv.conf",
            "-m",
            "/sys",
            "-m",
            "/dev",
            "-m",
            "/proc",
            "--",
        ]
        + cmd
    ),
    stdout_to_stderr=True,
    return_exit_code=True
)  # redirect stdout to stderr because we are passing the container id through stdout

if exit:
    die("build failed with exit status {}".format(exit))

utils.plash_exec("add-layer", container, os.path.join(changesdir, "data"))
