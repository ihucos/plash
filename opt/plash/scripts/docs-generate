#!/usr/bin/env python3

from subprocess import check_output
import os
import sys
from os import path
import jinja2

try:
    docs_out = sys.argv[1]
except IndexError:
    print('needs arg', file=sys.stderr)
    sys.exit(1)

PROJECT_DIR = path.dirname(path.dirname(path.abspath(__file__)))
TEMPL_DIR = path.join(PROJECT_DIR, 'lib/html')
EXEC_DIR = path.join(PROJECT_DIR, 'lib/exec')
BIN_DIR = path.join(PROJECT_DIR, 'bin')
TESTS_DIR = path.join(PROJECT_DIR, 'tests')
PLASH_EXECUTABLE = os.path.join(BIN_DIR, 'plash')


def render(tpl_path, **context):
    path, filename = os.path.split(tpl_path)
    return jinja2.Environment(loader=jinja2.FileSystemLoader(
        TEMPL_DIR)).get_template(filename).render(context)


out = check_output([PLASH_EXECUTABLE, 'help'])
out = out.decode()
progs = (i.split(None, 2)[1:] for i in out.splitlines())
macros = check_output([PLASH_EXECUTABLE, 'help-macros']).decode()

with open(path.join(docs_out, 'index.html'), 'w') as f:
    f.write(render('index.html', progs=progs, macros=macros))

filedocs = []
binfiles = [i for i in os.listdir(EXEC_DIR) if not i.startswith('.')
                if os.access(path.join(EXEC_DIR, i), os.X_OK)]
for subcommand in binfiles:

    fname = path.join(EXEC_DIR, subcommand)

    if os.access(fname + ".c", os.F_OK):
        fname += ".c"

    with open(fname) as f:
        read = f.read()
    lines = read.splitlines()

    # get doc out of source code
    doc = []
    if lines[0].startswith("#!/"):
        before_doc = [lines.pop(0)]
    else:
        before_doc = []
    while lines:
        line = lines.pop(0)
        if not line.startswith('#') and not line.startswith("//"):
            break
        doc.append(line)
    filedocs.append({
        'code': read,
        'before_doc': '\n'.join(before_doc),
        'doc': '\n'.join(doc),
        'after_doc': '\n'.join(lines),
        'prog': subcommand
    })

for item in filedocs:
    with open(path.join(docs_out, item['prog'] + '.html'), 'w') as f:
        f.write(render('command.html', **item))
