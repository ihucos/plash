#!/usr/bin/env python3
# usage: plash clean
#
# Cleans up plashs internal data.
# - Removes all broken links in $PLASH_DATA/index
# - Removes all broken links in $PLASH_DATA/map
# - Removes unused temporary directories in $PLASH_DATA/tmp

import math
import os
import shutil
import signal
import sys
from collections import Counter
from time import time

from plash import utils

utils.assert_initialized()
utils.unshare_user()

plash_data = utils.plash_call("data")

print("output_stable: false")


def remove_broken_links(dir):
    count = 0
    for file in os.listdir(dir):
        full_path = os.path.join(dir, file)
        try:
            os.stat(full_path)
        except FileNotFoundError:
            try:
                os.unlink(full_path)
                count += 1
            except FileNotFoundError:
                pass  # race condition, link removed by another process
    return count


#
# Remove all broken links in $PLASH_DATA/index
#
sys.stdout.write("unlinked_indexes: ")
sys.stdout.flush()
index_dir = os.path.join(plash_data, "index")
count = remove_broken_links(index_dir)
print(count)

#
# Remove all broken links in $PLASH_DATA/map
#
sys.stdout.write("unlinked_maps: ")
sys.stdout.flush()
maps_dir = os.path.join(plash_data, "map")
count = remove_broken_links(maps_dir)
print(count)

#
# Remove unused tmp dirs in $PLASH_DATA/tmp
#
sys.stdout.write("removed_tmpdirs: ")
sys.stdout.flush()
deleted_tmps = 0
tmp = os.path.join(plash_data, "tmp")
for file in os.listdir(tmp):
    abs_file = os.path.join(tmp, file)

    try:
        _, sid, pid, *_ = file.split("_")
        pid = int(pid)
    except ValueError:
        continue

    try:
        real_sid = os.getsid(pid)
    except ProcessLookupError:
        # no such pid, delete its tmp data
        delete = True
    else:
        if str(sid) == str(real_sid):
            # process still alive, don't delete its tmp dir
            delete = False
        else:
            # sid mismatch, its another one, delete
            delete = True

    if delete:
        shutil.rmtree(abs_file)
        deleted_tmps += 1
print(deleted_tmps)
