#!/usr/bin/env python3
#
# usage: plash-install-suid-wrapper

import os
import sys
import shutil

from plashlib.utils import die, handle_help_flag, die_with_usage, catch_and_die, handle_build_args, nodepath_or_die
from plashlib import ux
from tempfile import mkdtemp
from subprocess import check_call

handle_help_flag()
ux.assert_is_root()

PLASH_RUN_WRAPPER_GO = '''
package main

import "syscall"
import "os"
import "ioutil"
import "exec"
import "fmt"

func main() {
    container := os.Args[1]
    mountpoint = ioutil.TempDir('/var/run', '-plash-run-suid')
    if _, err := strconv.Atoi(container); err != nil {
        panic('argument must be an container, that is an integer')
    }
    link, err = os.Readlink('/var/lib/plash/index/'+container)
    cmd, err = exec.Command('mount', '-t', 'overlay', 'overlay', '-o', 'lowerdir=/var/lib/plash/index/2/_data:/var/lib/plash/index/0/_data,nosuid', mountpoint)
    if err != null {panic(err)}
    cmd.Wait()
    fmt.Println(mountpoint)

    //['mount', '-t', 'overlay', 'overlay', '-o', 'lowerdir=/var/lib/plash/index/2/_data:/var/lib/plash/index/0/_data,nosuid', '/asdf']
l
'''


tmp = mkdtemp()
gofile = os.path.join(tmp, 'plash-run-suid.go')
outfile = os.path.join(tmp, 'plash-run-suid')
with open(gofile, 'w') as f:
    f.write(PLASH_RUN_WRAPPER_GO)
check_call([
 'plash-run',
 '-i',
 'debian',
 '--apt',
 'golang',
 '--',
 'go', 'build', '-o', outfile, gofile
])
dst = '/usr/local/bin/plash-run-suid'
shutil.copy2(outfile, dst)
os.chmod(dst, 0o4755) # make it suid binary
