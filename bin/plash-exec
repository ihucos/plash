#!/usr/bin/env python3
#
# usage: plash-exec file [arg1 [arg2 [arg3 ...]]]
# Used as shebang. It runs a plash buildfile.

### config import path
import os, sys
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(
os.path.realpath(__file__)), "../lib/python")))
del os, sys
###

import os
import sys

import plash
from plash.eval import get_hint_values
from plash import utils
from plash.utils import (assert_initialized, catch_and_die, die)

# we need to set PLASH_DATA, since the plash launcher is not doing it for us
os.environ.setdefault("PLASH_DATA", os.path.expanduser("~/.plashdata"))

assert_initialized()

try:
    file, args = sys.argv[1], sys.argv[2:]
except IndexError:
    print("plash-exec: this program is usually invoked from a shebang",
        file=sys.stderr)
    sys.exit(1)

plashfile_dir = os.path.dirname(file)
libdir = os.path.dirname(str(plash.__file__))
libexec = os.path.join(libdir, 'libexec')
os.environ['PATH'] = '{}:{}'.format(libexec, os.environ['PATH'])

with open(file) as f:
    script = f.read()

build_shell_script = utils.plash_call('eval',
    "--eval-stdin",
    input=script,
    cwd=plashfile_dir,
    strip=False)
hint_values = get_hint_values(build_shell_script)

envs = []
for hint_name, hint_value in hint_values:
    if hint_name == 'use-env':
        env_val = os.environ.get(hint_value)
        if env_val:
            envs.append('{}={}'.format(hint_value, env_val))

exec = dict(hint_values).get('exec')
if exec is None:
    die("no hint named 'exec' found (maybe try adding `--entrypoint /bin/sh`)")

run_args = [exec] + args

run_container = utils.plash_call('build', '--run-stdin',
    input=build_shell_script,
    cwd=plashfile_dir,
    )

cmd = ['run', run_container] + envs + run_args
utils.plash_exec(*cmd)
